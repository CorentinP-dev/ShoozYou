generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  CLIENT
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  INITIATED
  SUCCEEDED
  FAILED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  cart   Cart?
}

model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Gender {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductType {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String       @id @default(uuid())
  sku         String       @unique
  name        String
  description String
  price       Decimal       @db.Decimal(10, 2)
  stock       Int           @default(0)
  imageUrl    String?
  brandId     String?
  genderId    String?
  shoeTypeId  String?
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  brand   Brand?       @relation(fields: [brandId], references: [id])
  gender  Gender?      @relation(fields: [genderId], references: [id])
  shoeType ProductType? @relation(fields: [shoeTypeId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user   User     @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id         String       @id @default(uuid())
  userId     String
  status     OrderStatus  @default(PENDING)
  total      Decimal       @db.Decimal(10, 2)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user   User        @relation(fields: [userId], references: [id])
  items  OrderItem[]
  payment Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  unitPrice Decimal   @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Payment {
  id         String        @id @default(uuid())
  orderId    String        @unique
  status     PaymentStatus @default(INITIATED)
  provider   String
  metadata   Json?
  createdAt  DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id])
}
